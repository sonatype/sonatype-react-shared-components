/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */

/**
 * All Possible Vulnerability (CVSS) Severity Levels.
 */
export const allVulnerabilitySeverityLevels = [
  'none',
  'low',
  'medium',
  'high',
  'critical'
] as const;

type SingleDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

export type VulnerabilityScore = `${SingleDigit}.${SingleDigit}` | '10.0';

/**
 * The type containing only the possible vulnerability CVSS severity level values.
 */
export type VulnerabilitySeverityLevel =
  (typeof allVulnerabilitySeverityLevels)[number];

/**
 * Lists the ranges of Vulnerability (CVSS) scores and their corresponding severity level.
 */
export const vulnerabilitySeverityAndScoreRangeList = Object.freeze([
  { min: 9.0, max: 10.0, severity: 'critical' },
  { min: 7.0, max: 8.9, severity: 'high' },
  { min: 4.0, max: 6.9, severity: 'medium' },
  { min: 0.1, max: 3.9, severity: 'low' },
  { min: 0.0, max: 0.0, severity: 'none' }
] as const);

/**
 * Maps vulnerability CVSS severity levels to their corresponding score ranges string representation.
 */
export const vulnerabilitySeverityScoreRangeMap = Object.freeze({
  critical: '9.0\u201410.0',
  high: '7.0\u20148.9',
  medium: '4.0\u20146.9',
  low: '0.1\u20143.9',
  none: '0.0'
});

const isOneDecimalPlace = (number: number): boolean => {
  const numberString = number.toString();
  const decimalIndex = numberString.indexOf('.');
  if (decimalIndex === -1) {
    return true;
  }
  return numberString.length - decimalIndex === 2;
};

/**
 * Converts a vulnerability CVSS score from a number to a string.
 * Throws an error when the score is not within the valid range and is not within one decimal place.
 */
export const formatVulnerabilityScore = (scoreNumber: number): VulnerabilityScore => {
  if (scoreNumber < 0 || scoreNumber > 10) {
    throw new Error('Vulnerability score must be between 0.0 and 10.0.');
  }
  if (!isOneDecimalPlace(scoreNumber)) {
    throw new Error('Vulnerability score must be one decimal place.');
  }
  return scoreNumber.toFixed(1) as VulnerabilityScore;
};

/**
 * Gets the CVSS severity level category for a given CVSS score string.
 * Returns null if the score is not within the valid range.
 */
export const getVulnerabilitySeverityLevel = (cvssScore: VulnerabilityScore): VulnerabilitySeverityLevel | null => {
  const score = parseFloat(cvssScore);
  const matchedRange = vulnerabilitySeverityAndScoreRangeList.find(range => score >= range.min && score <= range.max);
  return matchedRange ? matchedRange.severity : null;
};
