/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';
import { render, shallow, mount } from 'enzyme';
import 'jest-enzyme';

import RenderMarkdown from '../details/RenderMarkdown';

describe('RenderMarkdown', function() {
  it('passes .nx-vulnerability-details__html-detail className prop to ReactCommonmark', function () {
    const shallowRender = shallow(<RenderMarkdown>content</RenderMarkdown>);
    expect(shallowRender).toHaveClassName('nx-vulnerability-details__html-detail');
  });

  it('handles single ticks', function() {
    const wrapper = render(<RenderMarkdown>code `example`</RenderMarkdown>);
    expect(wrapper.html()).toBe('<p>code <code>example</code></p>');
  });

  it('handles double ticks', function() {
    const wrapper = render(<RenderMarkdown>code ``example``</RenderMarkdown>);
    expect(wrapper.html()).toBe('<p>code <code>example</code></p>');
  });

  it('disables gfm when parsing markdown', function () {
    const wrapper = render(<RenderMarkdown>link: http://example.com</RenderMarkdown>);
    expect(wrapper.html()).toBe('<p>link: http://example.com</p>');
  });

  it('adds target and rel attributes to markdown links', function () {
    const wrapper = mount(<RenderMarkdown>[example](http://example.com)</RenderMarkdown>);
    expect(wrapper.find('a')).toHaveProp({ target: '_blank', rel: 'noreferrer' });
  });

  it('adds an icon to markdown links', function () {
    const wrapper = mount(<RenderMarkdown>[example](http://example.com)</RenderMarkdown>);
    expect(wrapper).toContainMatchingElement('.nx-icon');
  });

  it('escapes raw html in markdown', function () {
    const markdownString = 'foo <h1>bar</h1>';
    const wrapper = render(<RenderMarkdown>{markdownString}</RenderMarkdown>);
    expect(wrapper.html()).toBe('<p>foo <span>&lt;h1&gt;</span>bar<span>&lt;/h1&gt;</span></p>');
  });

  it('handles fenced code blocks', function () {
    const markdownString = '```\ncode block example\n```';
    const wrapper = render(<RenderMarkdown>{markdownString}</RenderMarkdown>);
    expect(wrapper.html()).toBe('<pre><code>code block example\n</code></pre>');
  });

  it('handles fenced code blocks within blockquote', function () {
    const markdownString = '> Some other text in the blockquote\n' +
        '> ```\n' +
        '> code block example\n' +
        '> ```';
    const wrapper = render(<RenderMarkdown>{markdownString}</RenderMarkdown>);
    expect(wrapper.html()).toBe('<blockquote><p>Some other text in the blockquote</p><pre><code>code block example\n' +
        '</code></pre></blockquote>');
  });

  it('handles soft break', function () {
    const markdownString = 'foo\nbar';
    const wrapper = render(<RenderMarkdown>{markdownString}</RenderMarkdown>);
    expect(wrapper.html()).toBe('<p>foo<br>bar</p>');
  });
});
