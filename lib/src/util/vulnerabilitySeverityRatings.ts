/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */

import { fromPairs, map } from 'ramda';

/**
 * All Possible Vulnerability (CVSS) Severity Ratings.
 */
export const allVulnerabilitySeverityRatings = Object.freeze([
  'none',
  'low',
  'medium',
  'high',
  'critical'
] as const);

type SingleDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

export type VulnerabilityScore = `${SingleDigit}.${SingleDigit}` | '10.0';

/**
 * The type containing only the possible vulnerability CVSS severity rating values.
 */
export type VulnerabilitySeverityRating = (typeof allVulnerabilitySeverityRatings)[number];

/**
 * Lists the ranges of Vulnerability (CVSS) scores and their corresponding severity rating.
 */
export const vulnerabilitySeverityAndScoreRangeList = Object.freeze([
  { min: 9, max: 10, severity: 'critical' },
  { min: 7, max: 8.9, severity: 'high' },
  { min: 4, max: 6.9, severity: 'medium' },
  { min: 0.1, max: 3.9, severity: 'low' },
  { min: 0, max: 0, severity: 'none' }
] as const);

const validateVulnerabilityScoreNumber = (scoreNumber: number) => {
  if (!Number.isInteger(scoreNumber * 10)) {
    throw new TypeError('Vulnerability score must be a valid number with one decimal place.');
  }
  if (scoreNumber < 0 || scoreNumber > 10) {
    throw new TypeError('Vulnerability score must be between 0.0 and 10.0.');
  }
};

/**
 * Converts a vulnerability CVSS score from a number to a string.
 * Throws an error when the score is not within the valid range and is not within one decimal place.
 */
export const formatVulnerabilityScore = (scoreNumber: number): VulnerabilityScore => {
  validateVulnerabilityScoreNumber(scoreNumber);
  return scoreNumber.toFixed(1) as VulnerabilityScore;
};

/**
 * Gets the corresponding CVSS severity rating for a given CVSS score string or number.
 * Throws an error if the score is not within the valid range or is not a valid number with one decimal place.
 */
export const getVulnerabilitySeverityRating = (cvssScore: VulnerabilityScore | number): VulnerabilitySeverityRating => {
  const score = (typeof cvssScore === 'number') ? cvssScore : parseFloat(cvssScore);
  validateVulnerabilityScoreNumber(score);
  const matchedRange = vulnerabilitySeverityAndScoreRangeList.find(range => score >= range.min && score <= range.max);
  if (!matchedRange) {
    throw new TypeError('Invalid CVSS score.');
  }
  return matchedRange.severity;
};

/**
 * (Internal use, not exported to library users)
 * Maps vulnerability CVSS severity ratings to their corresponding score ranges string representation.
 */
export const vulnerabilitySeverityScoreRangeMap = Object.freeze(
    fromPairs(
        map<typeof vulnerabilitySeverityAndScoreRangeList[number], [VulnerabilitySeverityRating, string]>(
            (range) => [
              range.severity,
              range.min === range.max ?
                `${formatVulnerabilityScore(range.min)}` :
                `${formatVulnerabilityScore(range.min)}â€”${formatVulnerabilityScore(range.max)}`
            ],
            vulnerabilitySeverityAndScoreRangeList
        )
    ) as Record<VulnerabilitySeverityRating, string>
);
