/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';
import { NxP, NxCode } from '@sonatype/react-shared-components';

import { GalleryExampleTile, GalleryDescriptionTile } from '../../gallery-components/GalleryTiles';

import NxStableUniqueIdContextExample from './NxStableUniqueIdContextExample';

const nxStableUniqueIdContextCode = require('./NxStableUniqueIdContextExample?raw');

const ServerSideRenderingUtilsPage = () =>
  <>
    <GalleryDescriptionTile>
      <NxP>
        RSC strives to be compatible with server-side React rendering frameworks such as Next.js. One hurdle to this
        compatibility is the usage of autogenerated IDs. As a consumer of RSC, you might have such IDs in your own code,
        and additionally such IDs are common within the internals of RSC components. Often, these IDs are used in order
        to link elements together within the ARIA accessibility APIs. These IDs present a challenge to the
        <em>hydration</em> step of server-side rendering. It is during this step that the browser executes the
        first <em>client-side</em> React render and attempts to match it up with the server-rendered HTML already
        present within the document. If there are any mismatches, errors are thrown. Therefore it is important that
        any autogenerated IDs result in the same value on the client as they do on the server.
      </NxP>
      <NxP>
        As of the time of writing, the only way to get such consistent autogenerated IDs is to derive them from
        matching, predictable sequences of values on both the client and server. Most simply, this means using
        an incrementing counter. However, since the server process is long-lived and typically renders many pages
        over time, care must be taken to ensure that the server uses a separate incrementing counter for each
        page render. That way, for each page the counter starts at 0 on both the client and server.
      </NxP>
      <NxP>
        In order to facilitate these separate per-page counters, RSC provides
        an <NxCode>NxStableUniqueIdContext</NxCode> component. Whenever using RSC within server-side rendering,
        an instance of this component <strong>must</strong> be an ancestor of all RSC components within the JSX
        render tree. The <NxCode>NxStableUniqueIdContext</NxCode> component affects the counter used by
        RSC's <NxCode>useUniqueId</NxCode>. It <strong>does not</strong> however affect the counter used by
        RSC's <NxCode>getUniqueId</NxCode> utility function, as that function must work outside of React components
        and therefore does not have access to the context value. Therefore, use of <NxCode>getUniqueId</NxCode> in
        server-side rendered code is strongly discouraged.
      </NxP>
    </GalleryDescriptionTile>
    <GalleryExampleTile title="NxStableUniqueIdContext Example"
                        liveExample={NxStableUniqueIdContextExample}
                        codeExamples={nxStableUniqueIdContextCode}>
      An example of what some RSC-using React code that can run correctly on both server and client might look like.
      This example demonstrates both direct usage of RSC's autogenerated ID utilities as well as usage of an RSC
      component which uses autogenerated IDs internally.
    </GalleryExampleTile>
  </>;

export default ServerSideRenderingUtilsPage;
