/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import NxVulnerabilityIndicator, { Props } from '../NxVulnerabilityIndicator';
import { rtlRender, runTimers, userEvent } from '../../../__testutils__/rtlUtils';
import { screen } from '@testing-library/react';

describe('NxVulnerabilityIndicator', function() {
  const quickRender = rtlRender<Props>(NxVulnerabilityIndicator, {});

  it('renders an element with a role of graphics-symbol', async function() {
    const el = quickRender();
    await runTimers();
    const vulnerabilityIndicator = el.getByRole('graphics-symbol');
    expect(vulnerabilityIndicator).toBeInTheDocument();
  });

  it('has a fallback role of img', async function() {
    const el = quickRender();
    await runTimers();
    const vulnerabilityIndicator = el.getByRole('img', { queryFallbacks: true });
    expect(vulnerabilityIndicator).toBeInTheDocument();
  });

  it('takes precedence of vulnerabilitySeverityLevel if both props are provided', async function() {
    const el = quickRender({ vulnerabilityScore: '9.0', vulnerabilitySeverityLevel: 'low' });
    await runTimers();
    const user = userEvent.setup(),
        vulnerabilityIndicator = el.getByRole('graphics-symbol')!;

    await user.hover(vulnerabilityIndicator);
    const tooltip = await screen.findByRole('tooltip');
    expect(tooltip).toHaveTextContent('Low');
  });

  it('sets the accessible name based on the vulnerability level category', async function() {
    const el = quickRender({ vulnerabilityScore: '9.0', vulnerabilitySeverityLevel: 'low' });
    await runTimers();
    const vulnerabilityIndicator = el.getByRole('graphics-symbol')!;

    expect(vulnerabilityIndicator).toHaveAccessibleName('Low');
  });

  describe('should have default tooltips', function() {
    const getTooltipTextForProps = async (vulnerability: Props) => {
      const el = quickRender(vulnerability)!;
      await runTimers();
      const user = userEvent.setup(),
          vulnerabilityIndicator = el.getByRole('graphics-symbol');

      await user.hover(vulnerabilityIndicator);
      const tooltip = await screen.findByRole('tooltip');
      return tooltip.textContent;
    };

    describe('when vulnerabilityScore prop is provided', function() {
      it('for vulnerabilityScore 0', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '0.0' })).toBe('None');
      });
      it('for vulnerabilityScore 1', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '1.0' })).toBe('Low');
      });
      it('for vulnerabilityScore 2', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '2.0' })).toBe('Low');
      });
      it('for vulnerabilityScore 3', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '3.0' })).toBe('Low');
      });
      it('for vulnerabilityScore 4', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '4.0' })).toBe('Medium');
      });
      it('for vulnerabilityScore 5', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '5.0' })).toBe('Medium');
      });
      it('for vulnerabilityScore 6', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '6.0' })).toBe('Medium');
      });
      it('for vulnerabilityScore 7', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '7.0' })).toBe('High');
      });
      it('for vulnerabilityScore 8', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '8.0' })).toBe('High');
      });
      it('for vulnerabilityScore 9', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '9.0' })).toBe('Critical');
      });
      it('for vulnerabilityScore 10', async function() {
        expect(await getTooltipTextForProps({ vulnerabilityScore: '10.0' })).toBe('Critical');
      });
    });

    describe('when vulnerabilitySeverityLevel prop is provided', function() {
      it('for vulnerabilitySeverityLevel none', async function() {
        expect(await getTooltipTextForProps({ vulnerabilitySeverityLevel: 'none' })).toBe('None');
      });
      it('for vulnerabilitySeverityLevel low', async function() {
        expect(await getTooltipTextForProps({ vulnerabilitySeverityLevel: 'low' })).toBe('Low');
      });
      it('for vulnerabilitySeverityLevel medium', async function() {
        expect(await getTooltipTextForProps({ vulnerabilitySeverityLevel: 'medium' })).toBe('Medium');
      });
      it('for vulnerabilitySeverityLevel high', async function() {
        expect(await getTooltipTextForProps({ vulnerabilitySeverityLevel: 'high' })).toBe('High');
      });
      it('for vulnerabilitySeverityLevel critical', async function() {
        expect(await getTooltipTextForProps({ vulnerabilitySeverityLevel: 'critical' })).toBe('Critical');
      });
    });
  });

  it('should show custom tooltip title', async function() {
    const el = quickRender({ title: 'Extinction Level Vulnerability' });
    await runTimers();
    const user = userEvent.setup(),
        vulnerabilityIndicator = el.getByRole('graphics-symbol')!;

    await user.hover(vulnerabilityIndicator);
    const tooltip = await screen.findByRole('tooltip');
    expect(tooltip).toHaveTextContent('Extinction Level Vulnerability');
  });

  describe('when presentational prop is set to true', function() {
    const quickRender = rtlRender(NxVulnerabilityIndicator, { presentational: true });

    it('should hide tooltip', async function() {
      const user = userEvent.setup(),
          vulnerabilityIndicator = quickRender().getByRole('presentation', { hidden: true });

      expect(screen.queryByRole('tooltip')).not.toBeInTheDocument();
      await user.hover(vulnerabilityIndicator);
      expect(screen.queryByRole('tooltip')).not.toBeInTheDocument();
    });

    it('should set the role to "presentation"', function() {
      const vulnerabilityIndicator = quickRender().getByRole('presentation', { hidden: true });

      expect(vulnerabilityIndicator).toBeInTheDocument();
    });

    it('should not have an accessible name', function() {
      const vulnerabilityIndicator = quickRender().getByRole('presentation', { hidden: true });

      expect(vulnerabilityIndicator).not.toHaveAccessibleName();
    });
  });
});
