/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */

/**
 * All Possible Policy Vulnerability Level Categories
 */
export const allVulnerabilityLevelCategories = [
  'none',
  'low',
  'medium',
  'high',
  'critical'
] as const;

/**
 * The type containing only the possible VulnerabilityLevel values
 */
export type VulnerabilityLevelCategory =
  (typeof allVulnerabilityLevelCategories)[number];

export const cvssVulnerabilityLevelScoreRange = [
  { min: 9.0, max: 10.0, severity: 'critical' },
  { min: 7.0, max: 8.9, severity: 'high' },
  { min: 4.0, max: 6.9, severity: 'medium' },
  { min: 0.1, max: 3.9, severity: 'low' },
  { min: 0.0, max: 0.0, severity: 'none' },
] as const;

export const getVulnerabilityLevelFromCvssScore = (cvssScoreProp: number): VulnerabilityLevelCategory | null => {
  const cvssScore = parseFloat(cvssScoreProp.toFixed(1));
  const match = cvssVulnerabilityLevelScoreRange.find((range) => cvssScore >= range.min && cvssScore <= range.max);
  return match ? match.severity : null;
};
