/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */

/**
 * All Possible Policy Vulnerability Level Categories
 */
export const allVulnerabilityLevelCategories = [
  'none',
  'low',
  'medium',
  'high',
  'critical'
] as const;

type SingleDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

export type CvssScore = `${SingleDigit}.${SingleDigit}` | '10.0';

/**
 * The type containing only the possible vulnerability level category values
 */
export type VulnerabilityLevelCategory =
  (typeof allVulnerabilityLevelCategories)[number];

/**
 * Lists the ranges of CVSS scores and their corresponding vulnerability level categories.
 */
export const cvssSeverityScoreRanges = Object.freeze([
  { min: 9.0, max: 10.0, severity: 'critical' },
  { min: 7.0, max: 8.9, severity: 'high' },
  { min: 4.0, max: 6.9, severity: 'medium' },
  { min: 0.1, max: 3.9, severity: 'low' },
  { min: 0.0, max: 0.0, severity: 'none' }
] as const);

/**
 * Converts a CVSS score from a float to a string,
 * clamping the value to the valid range if necessary
 * Example: 8 -> "8.0", 11 -> "10.0", -1 -> "0.0"
 */
export const toCvssScoreString = (cvssScoreNumber: number): CvssScore =>
  Math.min(10, Math.max(0, cvssScoreNumber)).toFixed(1) as CvssScore;

/**
 * Get the vulnerability level category for a given CVSS score string.
 * Returns null if the score is not in the valid range.
 */
export const getVulnerabilityLevelCategory = (cvssScore: CvssScore): VulnerabilityLevelCategory | null => {
  const score = parseFloat(cvssScore);
  const matchedRange = cvssSeverityScoreRanges.find(range => score >= range.min && score <= range.max);
  return matchedRange ? matchedRange.severity : null;
};
