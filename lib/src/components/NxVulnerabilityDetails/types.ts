/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import * as PropTypes from 'prop-types';

export interface Props {
  vulnerabilityDetails: VulnerabilityDetails;
}

export interface VulnerabilityDetails {
  identifier: string;
  vulnerabilityLink?: string | null;
  source?: VulnerabilitySource | null;
  mainSeverity?: SeverityScore | null;
  severityScores?: SeverityScore[] | null;
  weakness?: SecurityWeakness | null;
  categories?: string[] | null;
  advisories?: ReferenceLink[] | null;
  rootCauses?: RootCause[] | null;

  description?: string | null;
  explanationMarkdown?: string | null;
  detectionMarkdown?: string | null;
  recommendationMarkdown?: string | null;

  componentExplanationMarkdown?: string | null;
  componentDetectionMarkdown?: string | null;
  componentRecommendationMarkdown?: string | null;
}

export interface VulnerabilitySource {
  longName?: string | null;
  shortName?: string | null;
}

/* eslint-disable camelcase */
export enum SeveritySourceEnum {
  cve_cvss_3 = 'CVE CVSS 3',
  cve_cvss_2 = 'CVE CVSS 2.0',
  sonatype_cvss_3 = 'Sonatype CVSS 3',
  sonatype_cvss_2 = 'Sonatype CVSS 2.0'
}
/* eslint-enable */

export interface SeverityScore {
  source?: keyof typeof SeveritySourceEnum | '' | null;
  score: number;
  vector?: string | null;
}

export interface SecurityWeakness {
  cweSource: string;
  cweIds: CweId[];
}

export interface CweId {
  id: string;
  uri: string;
}

export enum ReferenceTypeEnum {
  PROJECT = 'Project',
  ATTACK = 'Attack',
  THIRD_PARTY = 'Third Party',
  EVIDENCE = 'Evidence',
  UNKNOWN = 'Unknown'
}

export interface ReferenceLink {
  referenceType?: keyof typeof ReferenceTypeEnum | null;
  url?: string | null;
}

export interface RootCause {
  listOfPaths: string[];
  versionRange: string;
}

const severityScorePropType = PropTypes.shape({
  source: PropTypes.oneOf(['cve_cvss_3', 'cve_cvss_2', 'sonatype_cvss_3', 'sonatype_cvss_2', ''] as const),
  score: PropTypes.number.isRequired,
  vector: PropTypes.string
});

export const vulnerabilityDetailsPropType = PropTypes.shape({
  identifier: PropTypes.string.isRequired,
  vulnerabilityLink: PropTypes.string,
  source: PropTypes.shape({
    longName: PropTypes.string,
    shortName: PropTypes.string
  }),
  mainSeverity: severityScorePropType,
  severityScores: PropTypes.arrayOf(severityScorePropType.isRequired),
  weakness: PropTypes.shape({
    cweSource: PropTypes.string.isRequired,
    cweIds: PropTypes.arrayOf(PropTypes.shape({
      id: PropTypes.string.isRequired,
      uri: PropTypes.string.isRequired
    }).isRequired).isRequired
  }),
  categories: PropTypes.arrayOf(PropTypes.string.isRequired),
  advisories: PropTypes.arrayOf(PropTypes.shape({
    referenceType: PropTypes.string,
    url: PropTypes.string
  }).isRequired),
  rootCauses: PropTypes.arrayOf(PropTypes.shape({
    listOfPaths: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,
    versionRange: PropTypes.string.isRequired
  }).isRequired),
  descriptionHtml: PropTypes.string,
  explanationHtml: PropTypes.string,
  detectionHtml: PropTypes.string,
  recommendationHtml: PropTypes.string,
  componentExplanationHtml: PropTypes.string,
  componentDetectionHtml: PropTypes.string,
  componentRecommendationHtml: PropTypes.string
});

export const propTypes: PropTypes.ValidationMap<Props> = {
  vulnerabilityDetails: vulnerabilityDetailsPropType.isRequired
};
