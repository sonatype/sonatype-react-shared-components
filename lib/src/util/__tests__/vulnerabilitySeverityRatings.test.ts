/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import {
  formatVulnerabilityScore,
  getVulnerabilitySeverityRating,
  vulnerabilitySeverityScoreRangeMap
} from '../vulnerabilitySeverityRatings';

describe('vulnerabilitySeverityRatings utilities', function() {
  describe('formatVulnerabilityScore', function() {
    it('returns the correct Vulnerability (CVSS) score string given floating point number', function() {
      expect(() => formatVulnerabilityScore(-1)).toThrow(TypeError);
      expect(() => formatVulnerabilityScore(11)).toThrow(TypeError);

      expect(() => formatVulnerabilityScore(NaN)).toThrow(TypeError);
      expect(() => formatVulnerabilityScore(-Infinity)).toThrow(TypeError);
      expect(() => formatVulnerabilityScore(Infinity)).toThrow(TypeError);

      expect(() => formatVulnerabilityScore(5.00000000001)).toThrow(TypeError);
      expect(() => formatVulnerabilityScore(3.14)).toThrow(TypeError);

      expect(formatVulnerabilityScore(-0)).toBe('0.0');
      expect(formatVulnerabilityScore(0)).toBe('0.0');
      expect(formatVulnerabilityScore(2)).toBe('2.0');
      expect(formatVulnerabilityScore(3.3)).toBe('3.3');
      expect(formatVulnerabilityScore(10)).toBe('10.0');
    });
  });

  describe('getVulnerabilitySeverityRating', function() {
    it('returns the correct severity rating for each valid vulnerability score', function() {
      expect(getVulnerabilitySeverityRating('0.0')).toBe('none');
      expect(getVulnerabilitySeverityRating('0.1')).toBe('low');
      expect(getVulnerabilitySeverityRating('3.9')).toBe('low');
      expect(getVulnerabilitySeverityRating('4.0')).toBe('medium');
      expect(getVulnerabilitySeverityRating('6.9')).toBe('medium');
      expect(getVulnerabilitySeverityRating('7.0')).toBe('high');
      expect(getVulnerabilitySeverityRating('8.9')).toBe('high');
      expect(getVulnerabilitySeverityRating('9.0')).toBe('critical');
      expect(getVulnerabilitySeverityRating('10.0')).toBe('critical');

      expect(getVulnerabilitySeverityRating(0)).toBe('none');
      expect(getVulnerabilitySeverityRating(0.1)).toBe('low');
      expect(getVulnerabilitySeverityRating(3.9)).toBe('low');
      expect(getVulnerabilitySeverityRating(4.0)).toBe('medium');
      expect(getVulnerabilitySeverityRating(6.9)).toBe('medium');
      expect(getVulnerabilitySeverityRating(7.0)).toBe('high');
      expect(getVulnerabilitySeverityRating(8.9)).toBe('high');
      expect(getVulnerabilitySeverityRating(9.0)).toBe('critical');
      expect(getVulnerabilitySeverityRating(10)).toBe('critical');

      expect(() => getVulnerabilitySeverityRating(-1)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating(11)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating(5.00000000001)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating(3.1415)).toThrow(TypeError);

      expect(() => getVulnerabilitySeverityRating(NaN)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating(-Infinity)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating(Infinity)).toThrow(TypeError);

      expect(() => getVulnerabilitySeverityRating('-1' as any)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating('11' as any)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating('abc' as any)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating('3.1415' as any)).toThrow(TypeError);
      expect(() => getVulnerabilitySeverityRating('5.00000000001' as any)).toThrow(TypeError);
    });
  });

  describe('vulnerabilitySeverityScoreRangeMap', function() {
    expect(vulnerabilitySeverityScoreRangeMap.none).toBe('0.0');
    expect(vulnerabilitySeverityScoreRangeMap.low).toBe('0.1—3.9');
    expect(vulnerabilitySeverityScoreRangeMap.medium).toBe('4.0—6.9');
    expect(vulnerabilitySeverityScoreRangeMap.high).toBe('7.0—8.9');
    expect(vulnerabilitySeverityScoreRangeMap.critical).toBe('9.0—10.0');
  });
});
