/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import { faExclamationCircle } from '@fortawesome/free-solid-svg-icons';

import { getMountedComponent, getShallowComponent } from '../../../__testutils__/enzymeUtils';
import NxFontAwesomeIcon from '../../NxFontAwesomeIcon/NxFontAwesomeIcon';
import NxVulnerabilityDetails from '../NxVulnerabilityDetails';
import { ReferenceLink, SeverityScore, VulnerabilityDetails } from '../types';

describe('NxVulnerabilityDetails', function() {
  const vulnerabilityDetailsJson = {
    identifier: 'CVE-2014-0114',
    vulnerabilityLink: 'http://foohost/',
    source: {
      longName: 'National Vulnerability Database',
      shortName: 'CVE'
    },
    categories: ['configuration', 'privileged']
  };
  const getShallow = getShallowComponent(NxVulnerabilityDetails, { vulnerabilityDetails: vulnerabilityDetailsJson });
  const getMounted = getMountedComponent(NxVulnerabilityDetails, { vulnerabilityDetails: vulnerabilityDetailsJson });

  it('renders a div.nx-vulnerability-details', function() {
    expect(getShallow()).toMatchSelector('div.nx-vulnerability-details');
  });

  it('renders an H2 header with the identifier', function() {
    const component = getMounted();

    expect(component.find('h2.nx-h2')).toHaveText('CVE-2014-0114');
  });

  describe('left side', function() {
    function leftSide(extraDetails?: Partial<VulnerabilityDetails>) {
      const vulnerabilityDetails = { ...vulnerabilityDetailsJson, ...extraDetails };

      return getMounted({ vulnerabilityDetails }).find('.nx-grid-col').first();
    }

    const readOnlyByIndex = (idx: number) => (extraDetails?: Partial<VulnerabilityDetails>) => {
      const childAtIndex = leftSide(extraDetails).childAt(idx);

      return childAtIndex.isEmptyRender() ? childAtIndex : childAtIndex.find('.nx-read-only');
    };

    describe('first nx-read-only', function() {
      const readOnly = readOnlyByIndex(0);

      it('is labelled "Issue"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Issue');
      });

      it('contains a link with the identifier as its text and the vulnerabilityLink as its href', function() {
        const render = readOnly().find('.nx-read-only__data'),
            link = render.find('a');

        expect(link).toHaveClassName('nx-text-link');
        expect(link).toHaveProp('target', '_blank');
        expect(link).toHaveProp('rel', 'noreferrer');
        expect(link).toHaveProp('href', 'http://foohost/');
        expect(link).toHaveText('CVE-2014-0114');
      });
    });

    describe('second nx-read-only', function() {
      const readOnly = (extraDetails?: Partial<VulnerabilityDetails>) => readOnlyByIndex(1)({
        mainSeverity: { source: 'cve_cvss_3', score: 9.7 },
        ...extraDetails
      });

      it('is an empty render if mainSeverity is undefined and severityScores is undefined or empty', function() {
        expect(readOnly({ mainSeverity: undefined })).toBeEmptyRender();
        expect(readOnly({ mainSeverity: undefined, severityScores: [] })).toBeEmptyRender();
        expect(readOnly({ mainSeverity: undefined, severityScores: [{ source: 'cve_cvss_3', score: 9.7 }] }))
            .not.toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('is labelled "Severity"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Severity');
      });

      it('contains an nx-vulnerability-details__sub-description-list within its nx-read-only__data', function() {
        expect(readOnly().find('.nx-read-only__data').find('dl'))
            .toHaveClassName('nx-vulnerability-details__sub-description-list');
      });

      it('contains an nx-vulnerability-details__sub-description-container for each severity, with the main one first',
          function() {
            const additionalSeverityScores: SeverityScore[] = [
              { source: 'cve_cvss_2', score: 1 },
              { source: 'sonatype_cvss_3', score: 5.5 },
              { source: 'sonatype_cvss_2', score: 8.0 }
            ];

            const onlyMainList = readOnly().find('.nx-vulnerability-details__sub-description-list');
            expect(onlyMainList.find('div.nx-vulnerability-details__sub-description-container')).toExist();
            expect(onlyMainList.find('.nx-vulnerability-details__sub-description-term')).toHaveText('CVE CVSS 3');
            expect(onlyMainList.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('9.7');

            const mainAndAdditionalList = readOnly({ severityScores: additionalSeverityScores })
                .find('.nx-vulnerability-details__sub-description-list');

            expect(mainAndAdditionalList.find('.nx-vulnerability-details__sub-description-container').length).toBe(4);

            const firstChild = mainAndAdditionalList
                    .find('.nx-vulnerability-details__sub-description-container')
                    .at(0),
                secondChild = mainAndAdditionalList
                    .find('.nx-vulnerability-details__sub-description-container')
                    .at(1),
                thirdChild = mainAndAdditionalList
                    .find('.nx-vulnerability-details__sub-description-container')
                    .at(2),
                fourthChild = mainAndAdditionalList
                    .find('.nx-vulnerability-details__sub-description-container')
                    .at(3);

            expect(firstChild.find('.nx-vulnerability-details__sub-description-term')).toHaveText('CVE CVSS 3');
            expect(firstChild.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('9.7');

            expect(secondChild.find('.nx-vulnerability-details__sub-description-term')).toHaveText('CVE CVSS 2.0');
            expect(secondChild.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('1.0');

            expect(thirdChild.find('.nx-vulnerability-details__sub-description-term')).toHaveText('Sonatype CVSS 3');
            expect(thirdChild.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('5.5');

            expect(fourthChild.find('.nx-vulnerability-details__sub-description-term')).toHaveText('Sonatype CVSS 2.0');
            expect(fourthChild.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('8.0');
          }
      );

      it('renders an .nx-vulnerability-details__sub-description-term--unknown when there is no source', function() {
        const render = readOnly({ mainSeverity: { score: 2 } });

        expect(render.find('.nx-vulnerability-details__sub-description-term')).toHaveText('Unknown');
        expect(render.find('.nx-vulnerability-details__sub-description-term'))
            .toHaveClassName('.nx-vulnerability-details__sub-description-term--unknown');
        expect(render.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('2.0');
      });

      it('renders an .nx-vulnerability-details__sub-description-term--unknown when source is empty', function() {
        const render = readOnly({ mainSeverity: { score: 2, source: '' } });

        expect(render.find('.nx-vulnerability-details__sub-description-term')).toHaveText('Unknown');
        expect(render.find('.nx-vulnerability-details__sub-description-term'))
            .toHaveClassName('.nx-vulnerability-details__sub-description-term--unknown');
        expect(render.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('2.0');
      });
    });

    describe('third nx-read-only', function() {
      const readOnly = (extraDetails?: Partial<VulnerabilityDetails>) => readOnlyByIndex(2)({
        weakness: { cweSource: 'foo', cweIds: [{ id: '1', uri: 'http://cwe/' }] },
        ...extraDetails
      });

      it('is an empty render if weakness is undefined or weakness.cweIds is empty', function() {
        expect(readOnly({ weakness: undefined })).toBeEmptyRender();
        expect(readOnly({ weakness: { cweSource: 'foo', cweIds: [] } })).toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('is labelled "Weakness"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Weakness');
      });

      it('contains an nx-vulnerability-details__sub-description-list within its nx-read-only__data', function() {
        expect(readOnly().find('.nx-read-only__data').find('dl.nx-vulnerability-details__sub-description-list'))
            .toExist();
      });

      it('renders the cweSource and "CWE" as the term', function() {
        expect(readOnly().find('.nx-vulnerability-details__sub-description-term')).toHaveText('foo CWE');
      });

      it('renders a desc for each CWE id linking to its href', function() {
        const render = readOnly({
          weakness: { cweSource: 'foo', cweIds: [{ id: '1', uri: 'http://cwe/' }, { id: '27', uri: 'http://cwe2/' }] }
        });

        const descs = render.find('.nx-vulnerability-details__sub-description-desc');

        expect(descs.length).toBe(2);

        expect(descs.at(0).find('a')).toHaveText('1');
        expect(descs.at(0).find('a')).toHaveProp('href', 'http://cwe/');
        expect(descs.at(0).find('a')).toHaveProp('target', '_blank');
        expect(descs.at(0).find('a')).toHaveProp('rel', 'noreferrer');
        expect(descs.at(1).find('a')).toHaveText('27');
        expect(descs.at(1).find('a')).toHaveProp('href', 'http://cwe2/');
        expect(descs.at(1).find('a')).toHaveProp('target', '_blank');
        expect(descs.at(1).find('a')).toHaveProp('rel', 'noreferrer');
      });
    });

    describe('fourth nx-read-only', function() {
      const readOnly = readOnlyByIndex(3);

      it('is an empty render if source is undefined', function() {
        expect(readOnly({ source: undefined })).toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('is labelled "Source"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Source');
      });

      it('renders the longName as the data', function() {
        expect(readOnly().find('.nx-read-only__data')).toHaveText('National Vulnerability Database');
      });
    });

    describe('fifth nx-read-only', function() {
      const readOnly = readOnlyByIndex(4);

      it('is an empty render if categories is undefined or empty', function() {
        expect(readOnly({ categories: undefined })).toBeEmptyRender();
        expect(readOnly({ categories: [] })).toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('is labelled "Categories"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Categories');
      });

      it('renders the capitalized name of each category as a data item', function() {
        const data = readOnly().find('.nx-read-only__data');

        expect(data.length).toBe(2);
        expect(data.at(0)).toHaveText('Configuration');
        expect(data.at(1)).toHaveText('Privileged');
      });
    });
  });

  describe('right side', function() {
    function rightSide(extraDetails?: Partial<VulnerabilityDetails>) {
      const vulnerabilityDetails = { ...vulnerabilityDetailsJson, ...extraDetails };

      return getMounted({ vulnerabilityDetails }).find('.nx-grid-col').last();
    }

    const readOnlyByIndex = (idx: number) => (extraDetails?: Partial<VulnerabilityDetails>) => {
      const childAtIndex = rightSide(extraDetails).childAt(idx);

      return childAtIndex.isEmptyRender() ? childAtIndex : childAtIndex.find('.nx-read-only');
    };

    describe('first nx-read-only', function() {
      const readOnly = (extraDetails?: Partial<VulnerabilityDetails>) => readOnlyByIndex(0)({
        description: 'You\'re foobarred',
        ...extraDetails
      });

      it('is an empty render if description is undefined', function() {
        expect(readOnly({ description: undefined })).toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('is labeled "Description" if there is no source shortName', function() {
        expect(readOnly({ source: undefined }).find('.nx-read-only__label')).toHaveText('Description');
        expect(readOnly({ source: { longName: 'foo' } }).find('.nx-read-only__label')).toHaveText('Description');
      });

      it('includes the source shortName in the label if present', function() {
        expect(readOnly({ source: { shortName: 'foo' } }).find('.nx-read-only__label'))
            .toHaveText('Description from foo');
      });

      it('sets the data to a paragraph with the description', function() {
        const render = readOnly({ description: 'bad things happen' }),
            p = render.find('.nx-read-only__data').children();

        expect(p).toMatchSelector('p.nx-p');
        expect(p).toHaveText('bad things happen');
      });
    });

    describe('second nx-read-only', function() {
      const readOnly = readOnlyByIndex(1);

      it('is an empty render if explanationMarkdown and componentExplanationMarkdown are undefined', function() {
        expect(readOnly()).toBeEmptyRender();
        expect(readOnly({ explanationMarkdown: 'You\'re foobarred' })).not.toBeEmptyRender();
        expect(readOnly({ componentExplanationMarkdown: 'You\'re foobarred' })).not.toBeEmptyRender();
        expect(readOnly({ explanationMarkdown: 'You\'re foobarred', componentExplanationMarkdown: 'No, really' }))
            .not.toBeEmptyRender();
      });

      it('is labeled "Explanation"', function() {
        expect(readOnly({ explanationMarkdown: 'asdf' }).find('.nx-read-only__label')).toHaveText('Explanation');
      });

      it('sets the data to a concatenation of the markdown renders of the explanationMarkdown and ' +
          'componentExplanationMarkdown', function() {
        const render = readOnly({
              explanationMarkdown: '**Bad** things _happen_',
              componentExplanationMarkdown: '`<script>alert("pwnd")</script>`'
            }),
            data = render.find('.nx-read-only__data');

        expect(data.html()).toBe(
            '<dd class="nx-read-only__data">' +
              '<div class="nx-vulnerability-details__html-detail">' +
                '<p>' +
                  '<strong>Bad</strong> things <em>happen</em>' +
                '</p>' +
              '</div>' +
              '<div class="nx-vulnerability-details__html-detail">' +
                '<p>' +
                  '<code>&lt;script&gt;alert("pwnd")&lt;/script&gt;</code>' +
                '</p>' +
              '</div>' +
            '</dd>'
        );
      });

      it('prepends the malicious code warning if present categories contains malicious_code', function() {
        const render = readOnly({
              explanationMarkdown: '**Bad** things _happen_',
              componentExplanationMarkdown: '`<script>alert("pwnd")</script>`',
              categories: ['foobar', 'malicious_code']
            }),
            firstChild = render.find('.nx-read-only__data').childAt(0);

        expect(firstChild).toMatchSelector('p.nx-p.nx-vulnerability-details__warning');
        expect(firstChild.find(NxFontAwesomeIcon)).toHaveProp('icon', faExclamationCircle);
        expect(firstChild.find('span')).toHaveText('Warning: Malicious Code');
      });

      it('prepends the malicious code warning regardless of the text case of the category name', function() {
        const render = readOnly({
              explanationMarkdown: '**Bad** things _happen_',
              componentExplanationMarkdown: '`<script>alert("pwnd")</script>`',
              categories: ['foobar', 'mAlicIouS_COde']
            }),
            firstChild = render.find('.nx-read-only__data').childAt(0);

        expect(firstChild).toMatchSelector('p.nx-p.nx-vulnerability-details__warning');
        expect(firstChild.find(NxFontAwesomeIcon)).toHaveProp('icon', faExclamationCircle);
        expect(firstChild.find('span')).toHaveText('Warning: Malicious Code');
      });
    });

    describe('third nx-read-only', function() {
      const readOnly = readOnlyByIndex(2);

      it('is an empty render if detectionMarkdown and componentDetectionMarkdown are undefined', function() {
        expect(readOnly()).toBeEmptyRender();
        expect(readOnly({ detectionMarkdown: 'You\'re foobarred' })).not.toBeEmptyRender();
        expect(readOnly({ componentDetectionMarkdown: 'You\'re foobarred' })).not.toBeEmptyRender();
        expect(readOnly({ detectionMarkdown: 'You\'re foobarred', componentDetectionMarkdown: 'No, really' }))
            .not.toBeEmptyRender();
      });

      it('is labeled "Detection"', function() {
        expect(readOnly({ detectionMarkdown: 'asdf' }).find('.nx-read-only__label')).toHaveText('Detection');
      });

      it('sets the data to a concatenation of the markdown renders of the detectionMarkdown and ' +
          'componentDetectionMarkdown', function() {
        const render = readOnly({
              detectionMarkdown: '**Bad** things _happen_',
              componentDetectionMarkdown: '`<script>alert("pwnd")</script>`'
            }),
            data = render.find('.nx-read-only__data');

        expect(data.html()).toBe(
            '<dd class="nx-read-only__data">' +
              '<div class="nx-vulnerability-details__html-detail">' +
                '<p>' +
                  '<strong>Bad</strong> things <em>happen</em>' +
                '</p>' +
              '</div>' +
              '<div class="nx-vulnerability-details__html-detail">' +
                '<p>' +
                  '<code>&lt;script&gt;alert("pwnd")&lt;/script&gt;</code>' +
                '</p>' +
              '</div>' +
            '</dd>'
        );
      });
    });

    describe('fourth nx-read-only', function() {
      const readOnly = readOnlyByIndex(3);

      it('is an empty render if recommendationMarkdown and componentRecommendationMarkdown are undefined', function() {
        expect(readOnly()).toBeEmptyRender();
        expect(readOnly({ recommendationMarkdown: 'You\'re foobarred' })).not.toBeEmptyRender();
        expect(readOnly({ componentRecommendationMarkdown: 'You\'re foobarred' })).not.toBeEmptyRender();
        expect(readOnly({ recommendationMarkdown: 'You\'re foobarred', componentRecommendationMarkdown: 'No, really' }))
            .not.toBeEmptyRender();
      });

      it('is labeled "Recommendation"', function() {
        expect(readOnly({ recommendationMarkdown: 'asdf' }).find('.nx-read-only__label')).toHaveText('Recommendation');
      });

      it('sets the data to a concatenation of the markdown renders of the recommendationMarkdown and ' +
          'componentRecommendationMarkdown', function() {
        const render = readOnly({
              recommendationMarkdown: '**Bad** things _happen_',
              componentRecommendationMarkdown: '`<script>alert("pwnd")</script>`'
            }),
            data = render.find('.nx-read-only__data');

        expect(data.html()).toBe(
            '<dd class="nx-read-only__data">' +
              '<div class="nx-vulnerability-details__html-detail">' +
                '<p>' +
                  '<strong>Bad</strong> things <em>happen</em>' +
                '</p>' +
              '</div>' +
              '<div class="nx-vulnerability-details__html-detail">' +
                '<p>' +
                  '<code>&lt;script&gt;alert("pwnd")&lt;/script&gt;</code>' +
                '</p>' +
              '</div>' +
            '</dd>'
        );
      });
    });

    describe('fifth nx-read-only', function() {
      const readOnly = (extraDetails?: Partial<VulnerabilityDetails>) => readOnlyByIndex(4)({
        rootCauses: [
          { listOfPaths: ['a', 'b'], versionRange: '[1,2]' },
          { listOfPaths: ['c', 'd'], versionRange: '[1,3000)' }
        ],
        ...extraDetails
      });

      it('is an empty render if rootCauses is empty or undefined', function() {
        expect(readOnly()).not.toBeEmptyRender();
        expect(readOnly({ rootCauses: [] })).toBeEmptyRender();
        expect(readOnly({ rootCauses: undefined })).toBeEmptyRender();
      });

      it('is labeled "Root Cause"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Root Cause');
      });

      it('renders a div for each root cause containing a series of nx-vulnerability-details__root-cause-paths ' +
            'followed by a nx-vulnerability-details__root-cause_version-range', function () {
        const data = readOnly().find('.nx-read-only__data'),
            divs = data.children();

        expect(divs.length).toBe(2);

        expect(divs.at(0)).toMatchSelector('div');
        expect(divs.at(0).find('.nx-vulnerability-details__root-cause-path').length).toBe(2);
        expect(divs.at(0).find('.nx-vulnerability-details__root-cause-path').at(0)).toHaveText('a');
        expect(divs.at(0).find('.nx-vulnerability-details__root-cause-path').at(1)).toHaveText('b');
        expect(divs.at(0)
            .find('.nx-vulnerability-details__root-cause-path + .nx-vulnerability-details__root-cause-version-range')
        ).toExist();
        expect(divs.at(0).find('.nx-vulnerability-details__root-cause-version-range')).toHaveText('[1,2]');

        expect(divs.at(1)).toMatchSelector('div');
        expect(divs.at(1).find('.nx-vulnerability-details__root-cause-path').length).toBe(2);
        expect(divs.at(1).find('.nx-vulnerability-details__root-cause-path').at(0)).toHaveText('c');
        expect(divs.at(1).find('.nx-vulnerability-details__root-cause-path').at(1)).toHaveText('d');
        expect(divs.at(1)
            .find('.nx-vulnerability-details__root-cause-path + .nx-vulnerability-details__root-cause-version-range')
        ).toExist();
        expect(divs.at(1).find('.nx-vulnerability-details__root-cause-version-range')).toHaveText('[1,3000)');
      });
    });

    describe('sixth nx-read-only', function() {
      const readOnly = (extraDetails?: Partial<VulnerabilityDetails>) => readOnlyByIndex(5)({
        advisories: [{ referenceType: 'UNKNOWN', url: 'http://foo/' }],
        ...extraDetails
      });

      it('is an empty render if advisories is undefined or empty', function() {
        expect(readOnly({ advisories: undefined })).toBeEmptyRender();
        expect(readOnly({ advisories: [] })).toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('renders nothing if advisories missing data', function() {
        const advisories: ReferenceLink[] = [{
          referenceType: 'ATTACK'
        }, {
          referenceType: null,
          url: 'null-url'
        }];

        expect(readOnly({ advisories })).toBeEmptyRender();
      });

      it('renders nothing if advisories all have UNKNOWN source, and no URL', function () {
        expect(readOnly({advisories: [{referenceType: 'UNKNOWN'}]})).toBeEmptyRender();
      });

      it('is labelled "Advisories"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('Advisories');
      });

      it('renders a series of nx-read-only__data containing only links if all links have an UNKNOWN referenceType',
          function() {
            const advisories: ReferenceLink[] = [
                  { referenceType: 'UNKNOWN', url: 'http://asdf/' },
                  { referenceType: 'UNKNOWN', url: 'http://qwerty/' }
                ],
                render = readOnly({ advisories });

            expect(render.find('.nx-read-only__data').length).toBe(2);
            expect(render.find('.nx-read-only__data').at(0).find('a')).toHaveText('http://asdf/');
            expect(render.find('.nx-read-only__data').at(0).find('a')).toHaveProp('href', 'http://asdf/');
            expect(render.find('.nx-read-only__data').at(0).find('a')).toHaveProp('rel', 'noreferrer');
            expect(render.find('.nx-read-only__data').at(0).find('a')).toHaveProp('target', '_blank');
            expect(render.find('.nx-read-only__data').at(1).find('a')).toHaveText('http://qwerty/');
            expect(render.find('.nx-read-only__data').at(1).find('a')).toHaveProp('href', 'http://qwerty/');
            expect(render.find('.nx-read-only__data').at(1).find('a')).toHaveProp('rel', 'noreferrer');
            expect(render.find('.nx-read-only__data').at(1).find('a')).toHaveProp('target', '_blank');
          }
      );

      it('renders a sub-description-list with links and references types if some referenceTypes are not UNKNOWN',
          function() {
            const advisories: ReferenceLink[] = [
                  { referenceType: 'PROJECT', url: 'http://asdf/' },
                  { referenceType: 'UNKNOWN', url: 'http://qwerty/' },
                  { referenceType: 'ATTACK', url: 'http://foobar/' }
                ],
                render = readOnly({ advisories });

            expect(render.find('.nx-read-only__data').length).toBe(1);

            const subList = render.find('.nx-vulnerability-details__sub-description-list');

            expect(subList).toExist();
            expect(subList.children().length).toBe(3);

            const firstChild = subList.find('div.nx-vulnerability-details__sub-description-container').at(0),
                secondChild = subList.find('div.nx-vulnerability-details__sub-description-container').at(1),
                thirdChild = subList.find('div.nx-vulnerability-details__sub-description-container').at(2);

            expect(firstChild).toExist();
            expect(firstChild.find('dt.nx-vulnerability-details__sub-description-term')).toHaveText('Project');
            expect(subList.childAt(0).find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveClassName('nx-text-link');
            expect(firstChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('href', 'http://asdf/');
            expect(firstChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('rel', 'noreferrer');
            expect(firstChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('target', '_blank');
            expect(firstChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveText('http://asdf/');

            expect(secondChild.find('div.nx-vulnerability-details__sub-description-container')).toExist();
            expect(secondChild.find('dt.nx-vulnerability-details__sub-description-term')).toHaveText('Unknown');
            expect(secondChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveClassName('nx-text-link');
            expect(secondChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('href', 'http://qwerty/');
            expect(secondChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('rel', 'noreferrer');
            expect(secondChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('target', '_blank');
            expect(secondChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveText('http://qwerty/');

            expect(thirdChild.find('div.nx-vulnerability-details__sub-description-container')).toExist();
            expect(thirdChild.find('dt.nx-vulnerability-details__sub-description-term')).toHaveText('Attack');
            expect(thirdChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveClassName('nx-text-link');
            expect(thirdChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('href', 'http://foobar/');
            expect(thirdChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('rel', 'noreferrer');
            expect(thirdChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveProp('target', '_blank');
            expect(thirdChild.find('dd.nx-vulnerability-details__sub-description-desc').find('a'))
                .toHaveText('http://foobar/');
          }
      );
    });

    describe('seventh nx-read-only', function() {
      const readOnly = (extraDetails?: Partial<VulnerabilityDetails>) => readOnlyByIndex(6)({
        mainSeverity: { source: 'cve_cvss_3', vector: '1:2:3', score: 9.8 },
        ...extraDetails
      });

      it('is an empty render if mainSeverity is undefined or does not include source nor vector', function() {
        expect(readOnly({ mainSeverity: undefined })).toBeEmptyRender();
        expect(readOnly({ mainSeverity: { score: 10 } })).toBeEmptyRender();
        expect(readOnly({ mainSeverity: { score: 10, source: '' } })).toBeEmptyRender();
        expect(readOnly({ mainSeverity: { score: 10, source: 'cve_cvss_2' } })).not.toBeEmptyRender();
        expect(readOnly({ mainSeverity: { score: 10, vector: '1:23' } })).not.toBeEmptyRender();
        expect(readOnly({ mainSeverity: { score: 10, source: '', vector: '1:23' } })).not.toBeEmptyRender();
        expect(readOnly()).not.toBeEmptyRender();
      });

      it('is labeled "CVSS Details"', function() {
        expect(readOnly().find('.nx-read-only__label')).toHaveText('CVSS Details');
      });

      it('renders a sub-description-list', function() {
        expect(readOnly().find('.nx-read-only__data .nx-vulnerability-details__sub-description-list')).toExist();
      });

      it('sets the first item in the sub list with the source as the term and the severity as the desc', function() {
        const subList = readOnly().find('.nx-vulnerability-details__sub-description-list'),
            firstItem = subList.find('.nx-vulnerability-details__sub-description-container').first();

        expect(firstItem.find('.nx-vulnerability-details__sub-description-term')).toHaveText('CVE CVSS 3');
        expect(firstItem.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('9.8');
      });

      it('does not render the first item if the source is not set', function() {
        const subList = readOnly({ mainSeverity: { score: 9.8, vector: '1:2:3' } })
                .find('.nx-vulnerability-details__sub-description-list'),
            firstItem = subList.childAt(0);

        expect(firstItem).not.toIncludeText('9.8');
      });

      it('does not render the first item if the source is empty', function() {
        const subList = readOnly({ mainSeverity: { source: '', score: 9.8, vector: '1:2:3' } })
                .find('.nx-vulnerability-details__sub-description-list'),
            firstItem = subList.childAt(0);

        expect(firstItem).not.toIncludeText('9.8');
      });

      it('sets the second item in the sub list based on the vector', function() {
        const subList = readOnly().find('.nx-vulnerability-details__sub-description-list'),
            lastItem = subList.find('.nx-vulnerability-details__sub-description-container').last();

        expect(lastItem.find('.nx-vulnerability-details__sub-description-term')).toHaveText('CVSS Vector');
        expect(lastItem.find('.nx-vulnerability-details__sub-description-desc')).toHaveText('1:2:3');
      });

      it('does not render the second item if the vector is not set', function() {
        const subList = readOnly({ mainSeverity: { score: 9.8, source: 'cve_cvss_2' } })
            .find('.nx-vulnerability-details__sub-description-list');

        expect(subList).not.toIncludeText('CVSS Vector');
      });
    });
  });
});
