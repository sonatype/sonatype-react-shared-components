/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';
import { NxP, NxCode, NxPre, NxTextLink } from '@sonatype/react-shared-components';

import { GalleryDescriptionTile } from '../../gallery-components/GalleryTiles';

const ServerSideRenderingUtilsPage = () =>
  <>
    <GalleryDescriptionTile>
      <NxP>
        RSC/Tartan recently added support for Server-Side-Rendering (SSR),
        where a node.js framework may be used to generate an initial render of a
        React-based page on the server, and then the JavaScript on the client
        uses those same React components in order to add dynamic behavior to the
        page. In particular, RSC supports the <NxTextLink href="https://nextjs.org/" external>Next.js</NxTextLink> SSR
        framework. However, there are certain configurations and utilities that a project must use
        in order to be successful with RSC in an SSR environment.
      </NxP>
      <NxP>
        The first challenge comes from the fact that RSC expects to be used
        in a module system that can handle imports of non-JavaScript files -
        specifically of SCSS stylesheets and image files. Next.js does support
        these types of imports, but it does not enable that support by default
        for third-party packages, only for the code of the Next.js app itself.
        To enable proper processing of these imports within RSC,
        the <NxCode>next-transpile-modules</NxCode> utility can be used. This utility is
        a separate package which can be installed via npm and which can be used
        within the <NxCode>next.config.js</NxCode> file as follows:
      </NxP>
      <NxPre>
        {/* eslint-disable react/jsx-indent */}
{`const withTM = require('next-transpile-modules')([
  '@sonatype/react-shared-components'
]);

module.exports = withTM({});`}
        {/* eslint-enable react/jsx-indent */}
      </NxPre>
      <NxP>
        The other thing that must be dealt with for SSR is autogenerated ids
        within the DOM output. A number of RSC components use auto-generated ids
        internally for various purposes such as linking labels to form fields.
        Additionally it is possible that you might use auto-generated ids within
        your own code. The difficulty with these ids arises during the
        “hydration” phase - when the server-rendered DOM has been loaded into
        the browser and the browser then executes its first client-side render
        of the React components and expects the two renders to match. Even
        attribute values must match. If autogenerated ids were simply random,
        they would not match and the browser would throw errors. Instead of
        randomness, incrementing counters may be used, but care must be taken:
        the server is typically a long-running process that renders many
        different pages over time, so separate counters must be used for each
        page. The most effective way to ensure that this is the case is to use a
        React context to manage the counters - each render gets a separate
        context provider and thus a separate counter. RSC facilitates this by
        providing a React component called <NxCode>NxStableUniqueIdContext</NxCode>.
        Within children of this component, all autogenerated ids within RSC
        components or created by the RSC <NxCode>useUniqueId</NxCode> hook are
        generated from the specific counter instance provided by that instance
        of <NxCode>NxStableUniqueIdContext</NxCode>. Therefore it is a rule that all
        SSR pages which use RSC <em>must</em> have an instance of
        <NxCode>NxStableUniqueIdContext</NxCode> as an ancestor of all RSC
        components. For more details and an example, see the {' '}
        <NxTextLink href="#/pages/Server%20Side%20Rendering%20Utilities">
          Server Side Rendering Utilities
        </NxTextLink>
        {' '}documentation.
      </NxP>
    </GalleryDescriptionTile>
  </>;

export default ServerSideRenderingUtilsPage;
