/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import NxVulnerabilityIndicator, { Props } from '../NxVulnerabilityIndicator';
import { rtlRender, runTimers, userEvent } from '../../../__testutils__/rtlUtils';
import { screen } from '@testing-library/react';

describe('NxVulnerabilityIndicator', function() {
  const quickRender = rtlRender<Props>(NxVulnerabilityIndicator, {});

  it('renders an element with a role of graphics-symbol', async function() {
    const el = quickRender();
    await runTimers();
    const vulnerabilityIndicator = el.getByRole('graphics-symbol');
    expect(vulnerabilityIndicator).toBeInTheDocument();
  });

  it('has a fallback role of img', async function() {
    const el = quickRender();
    await runTimers();
    const vulnerabilityIndicator = el.getByRole('img', { queryFallbacks: true });
    expect(vulnerabilityIndicator).toBeInTheDocument();
  });

  it('takes precedence of severityRating if both props are provided', async function() {
    const el = quickRender({ score: 9, severityRating: 'low' });
    await runTimers();
    const user = userEvent.setup(),
        vulnerabilityIndicator = el.getByRole('graphics-symbol')!;

    await user.hover(vulnerabilityIndicator);
    const tooltip = await screen.findByRole('tooltip');
    expect(tooltip).toHaveTextContent('Low');
  });

  it('sets the accessible name based on the severity rating', async function() {
    const el = quickRender({ score: 9, severityRating: 'low' });
    await runTimers();
    const vulnerabilityIndicator = el.getByRole('graphics-symbol')!;

    expect(vulnerabilityIndicator).toHaveAccessibleName('Vulnerability: Low (0.1—3.9)');
  });

  describe('should have default tooltips', function() {
    const getTooltipTextForProps = async (vulnerability: Props) => {
      const el = quickRender(vulnerability)!;
      await runTimers();
      const user = userEvent.setup(),
          vulnerabilityIndicator = el.getByRole('graphics-symbol');

      await user.hover(vulnerabilityIndicator);
      const tooltip = await screen.findByRole('tooltip');
      return tooltip.textContent;
    };

    describe('when vulnerabilityScore prop is provided', function() {
      describe('for vulnerabilityScore 0', function() {
        it('score: 0', async () => {
          expect(await getTooltipTextForProps({ score: 0 })).toBe('Vulnerability: None (0.0)');
        });
      });
      describe('for vulnerability score between 0.1 and 3.9', function() {
        it('score: 0.1', async () => {
          expect(await getTooltipTextForProps({ score: 0.1 })).toBe('Vulnerability: Low (0.1—3.9)');
        });
        it('score: 1', async () => {
          expect(await getTooltipTextForProps({ score: 1 })).toBe('Vulnerability: Low (0.1—3.9)');
        });
        it('score: 3.9', async () => {
          expect(await getTooltipTextForProps({ score: 3.9 })).toBe('Vulnerability: Low (0.1—3.9)');
        });
      });
      describe('for vulnerability score between 4.0 and 6.9', function() {
        it('score: 4', async () => {
          expect(await getTooltipTextForProps({ score: 4 })).toBe('Vulnerability: Medium (4.0—6.9)');
        });
        it('score: 5', async () => {
          expect(await getTooltipTextForProps({ score: 5 })).toBe('Vulnerability: Medium (4.0—6.9)');
        });
        it('score: 6.9', async () => {
          expect(await getTooltipTextForProps({ score: 6.9 })).toBe('Vulnerability: Medium (4.0—6.9)');
        });
      });
      describe('for vulnerability score between 7.0 and 8.9', function() {
        it('score: 7', async () => {
          expect(await getTooltipTextForProps({ score: 7 })).toBe('Vulnerability: High (7.0—8.9)');
        });
        it('score: 8', async () => {
          expect(await getTooltipTextForProps({ score: 8 })).toBe('Vulnerability: High (7.0—8.9)');
        });
        it('score: 8.9', async () => {
          expect(await getTooltipTextForProps({ score: 8.9 })).toBe('Vulnerability: High (7.0—8.9)');
        });
      });
      describe('for vulnerability score between 9.0 and 10.0', function() {
        it('score: 9', async () => {
          expect(await getTooltipTextForProps({ score: 9 })).toBe('Vulnerability: Critical (9.0—10.0)');
        });
        it('score: 9.5', async () => {
          expect(await getTooltipTextForProps({ score: 9.5 })).toBe('Vulnerability: Critical (9.0—10.0)');
        });
        it('score: 10', async () => {
          expect(await getTooltipTextForProps({ score: 10 })).toBe('Vulnerability: Critical (9.0—10.0)');
        });
      });
    });

    it('should throw error when invalid score is provided', () => {
      expect(() => quickRender({ score: 1.12345 })).toThrow(TypeError);
      expect(() => quickRender({ score: -10 })).toThrow(TypeError);
    });

    describe('when vulnerabilitySeverityRating prop is provided', function() {
      it('for severityRating none', async function() {
        expect(await getTooltipTextForProps({ severityRating: 'none' })).toBe('Vulnerability: None (0.0)');
      });
      it('for severityRating low', async function() {
        expect(await getTooltipTextForProps({ severityRating: 'low' })).toBe('Vulnerability: Low (0.1—3.9)');
      });
      it('for severityRating medium', async function() {
        expect(await getTooltipTextForProps({ severityRating: 'medium' })).toBe('Vulnerability: Medium (4.0—6.9)');
      });
      it('for severityRating high', async function() {
        expect(await getTooltipTextForProps({ severityRating: 'high' })).toBe('Vulnerability: High (7.0—8.9)');
      });
      it('for severityRating critical', async function() {
        expect(await getTooltipTextForProps({ severityRating: 'critical' })).toBe('Vulnerability: Critical (9.0—10.0)');
      });
    });
  });

  it('should show custom tooltip title', async function() {
    const el = quickRender({ title: 'Extinction Rating Vulnerability' });
    await runTimers();
    const user = userEvent.setup(),
        vulnerabilityIndicator = el.getByRole('graphics-symbol')!;

    await user.hover(vulnerabilityIndicator);
    const tooltip = await screen.findByRole('tooltip');
    expect(tooltip).toHaveTextContent('Extinction Rating Vulnerability');
  });

  describe('when presentational prop is set to true', function() {
    const quickRender = rtlRender(NxVulnerabilityIndicator, { presentational: true });

    it('should hide tooltip', async function() {
      const user = userEvent.setup(),
          vulnerabilityIndicator = quickRender().getByRole('presentation', { hidden: true });

      expect(screen.queryByRole('tooltip')).not.toBeInTheDocument();
      await user.hover(vulnerabilityIndicator);
      expect(screen.queryByRole('tooltip')).not.toBeInTheDocument();
    });

    it('should set the role to "presentation"', function() {
      const vulnerabilityIndicator = quickRender().getByRole('presentation', { hidden: true });

      expect(vulnerabilityIndicator).toBeInTheDocument();
    });

    it('should not have an accessible name', function() {
      const vulnerabilityIndicator = quickRender().getByRole('presentation', { hidden: true });

      expect(vulnerabilityIndicator).not.toHaveAccessibleName();
    });
  });
});
